# -*- coding: utf-8 -*-
"""Statistics_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dXKlxA49KN11urPw60ECmFUi3ys8othS
"""

# Install required packages
pip install streamlit
pip install seaborn
pip install plotly
pip install scipy
npm install localtunnel

# Save this as 'statistics_app.py'
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from scipy import stats
from sklearn.datasets import load_iris, load_wine, load_breast_cancer, load_diabetes
import warnings
warnings.filterwarnings('ignore')

# Set page configuration
st.set_page_config(
    page_title="Statistics Visualization Hub",
    page_icon="📊",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #1f77b4, #ff7f0e);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: bold;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #2e86ab;
        margin: 1rem 0;
    }
    .highlight-box {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
        margin: 1rem 0;
    }
    .metric-container {
        background-color: #ffffff;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_sample_datasets():
    """Load and prepare sample datasets from sklearn"""
    datasets = {}

    # Iris dataset
    iris = load_iris()
    datasets['iris'] = pd.DataFrame(iris.data, columns=iris.feature_names)
    datasets['iris']['species'] = iris.target_names[iris.target]

    # Wine dataset
    wine = load_wine()
    datasets['wine'] = pd.DataFrame(wine.data, columns=wine.feature_names)
    datasets['wine']['wine_class'] = wine.target

    # Breast Cancer dataset
    cancer = load_breast_cancer()
    datasets['cancer'] = pd.DataFrame(cancer.data, columns=cancer.feature_names)
    datasets['cancer']['diagnosis'] = cancer.target_names[cancer.target]

    # Diabetes dataset
    diabetes = load_diabetes()
    datasets['diabetes'] = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
    datasets['diabetes']['target'] = diabetes.target

    return datasets

def calculate_statistics(data):
    """Calculate comprehensive statistics for a dataset"""
    return {
        'mean': np.mean(data),
        'median': np.median(data),
        'mode': stats.mode(data, keepdims=True)[0][0] if len(data) > 0 else 'No mode',
        'std': np.std(data),
        'var': np.var(data),
        'range': np.max(data) - np.min(data),
        'q1': np.percentile(data, 25),
        'q3': np.percentile(data, 75),
        'iqr': np.percentile(data, 75) - np.percentile(data, 25),
        'cv': (np.std(data) / np.mean(data)) * 100 if np.mean(data) != 0 else 0
    }

def main():
    # Sidebar navigation
    st.sidebar.title("📊 Navigation")
    page = st.sidebar.selectbox(
        "Choose a section:",
        ["🏠 Home", "📈 Descriptive Statistics", "🔍 Data Types Explorer",
         "📐 Central Tendency", "📏 Dispersion Measures", "📊 Univariate Analysis",
         "🔗 Bivariate Analysis", "📈 Quantiles & Percentiles"]
    )

    if page == "🏠 Home":
        show_home_page()
    elif page == "📈 Descriptive Statistics":
        show_descriptive_stats()
    elif page == "🔍 Data Types Explorer":
        show_data_types()
    elif page == "📐 Central Tendency":
        show_central_tendency()
    elif page == "📏 Dispersion Measures":
        show_dispersion()
    elif page == "📊 Univariate Analysis":
        show_univariate_analysis()
    elif page == "🔗 Bivariate Analysis":
        show_bivariate_analysis()
    elif page == "📈 Quantiles & Percentiles":
        show_quantiles()

def show_home_page():
    st.markdown('<h1 class="main-header">Statistics Visualization Hub</h1>', unsafe_allow_html=True)

    st.markdown("""
    <div class="highlight-box">
        <h2>🚀 Welcome to the Interactive Statistics Learning Platform</h2>
        <p>Discover the power of statistics through real-world examples and interactive visualizations.
        Statistics drives billions of dollars in business decisions and shapes critical research worldwide.</p>
    </div>
    """, unsafe_allow_html=True)

    # High-impact statistics examples
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown("""
        <div class="metric-container">
            <h3>💰 Business Intelligence</h3>
            <ul>
                <li><strong>$35B+</strong> - Amazon's recommendation revenue</li>
                <li><strong>10-20 hours</strong> saved daily by HelloFresh</li>
                <li>Marketing optimization generating millions</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div class="metric-container">
            <h3>🏥 Healthcare Impact</h3>
            <ul>
                <li><strong>$200B+</strong> - Annual pharma research</li>
                <li>Clinical trials save millions of lives</li>
                <li>COVID-19 policy worth trillions</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown("""
        <div class="metric-container">
            <h3>📊 Financial Markets</h3>
            <ul>
                <li><strong>$100T+</strong> - Global assets managed</li>
                <li><strong>$6T+</strong> - Insurance premiums</li>
                <li>High-frequency trading algorithms</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

def show_descriptive_stats():
    st.markdown('<h1 class="main-header">📈 Descriptive Statistics Overview</h1>', unsafe_allow_html=True)

    datasets = load_sample_datasets()

    # Dataset selection
    dataset_choice = st.selectbox("Choose a dataset:", list(datasets.keys()))
    selected_data = datasets[dataset_choice]

    # Display basic information
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Dataset Overview")
        st.write(f"**Shape:** {selected_data.shape}")
        st.write(f"**Columns:** {list(selected_data.columns)}")

    with col2:
        st.subheader("Sample Data")
        st.dataframe(selected_data.head())

    # Select numeric column for analysis
    numeric_cols = selected_data.select_dtypes(include=[np.number]).columns.tolist()
    if numeric_cols:
        selected_column = st.selectbox("Select a numeric column for analysis:", numeric_cols)

        if selected_column:
            data = selected_data[selected_column].dropna()
            stats_dict = calculate_statistics(data)

            # Display statistics in metrics
            st.subheader("📊 Descriptive Statistics")

            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Mean", f"{stats_dict['mean']:.2f}")
                st.metric("Standard Deviation", f"{stats_dict['std']:.2f}")
            with col2:
                st.metric("Median", f"{stats_dict['median']:.2f}")
                st.metric("Variance", f"{stats_dict['var']:.2f}")
            with col3:
                st.metric("Mode", f"{stats_dict['mode']:.2f}")
                st.metric("Range", f"{stats_dict['range']:.2f}")
            with col4:
                st.metric("Q1", f"{stats_dict['q1']:.2f}")
                st.metric("Q3", f"{stats_dict['q3']:.2f}")

            # Visualizations
            st.subheader("📈 Visualizations")

            # Create tabs for different visualizations
            tab1, tab2, tab3, tab4 = st.tabs(["Histogram", "Box Plot", "Distribution", "Summary"])

            with tab1:
                bins = st.slider("Number of bins:", 10, 50, 30)
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.hist(data, bins=bins, alpha=0.7, color='skyblue', edgecolor='black')
                ax.set_title(f'Histogram of {selected_column}')
                ax.set_xlabel(selected_column)
                ax.set_ylabel('Frequency')
                st.pyplot(fig)

            with tab2:
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.boxplot(data)
                ax.set_title(f'Box Plot of {selected_column}')
                ax.set_ylabel(selected_column)
                st.pyplot(fig)

            with tab3:
                fig, ax = plt.subplots(figsize=(10, 6))
                sns.histplot(data, kde=True, ax=ax)
                ax.set_title(f'Distribution of {selected_column}')
                st.pyplot(fig)

            with tab4:
                st.write(selected_data.describe())

def show_data_types():
    st.markdown('<h1 class="main-header">🔍 Data Types Explorer</h1>', unsafe_allow_html=True)

    st.markdown("""
    ## Understanding Data Types

    Data types are fundamental to statistical analysis. Let's explore different types with real examples:
    """)

    # Interactive data type examples
    tab1, tab2, tab3 = st.tabs(["Quantitative", "Qualitative", "Time Series"])

    with tab1:
        st.subheader("📊 Quantitative Data")

        # Generate sample quantitative data
        np.random.seed(42)
        sample_size = st.slider("Sample size:", 100, 2000, 1000)
        manufacturing_data = np.random.normal(100, 5, sample_size)

        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            **Real-world examples:**
            - Manufacturing: Product weights, dimensions
            - Finance: Stock prices, trading volumes
            - Healthcare: Patient vital signs, test results
            """)

        with col2:
            fig, ax = plt.subplots(figsize=(8, 5))
            ax.hist(manufacturing_data, bins=30, alpha=0.7, color='lightblue', edgecolor='black')
            ax.set_title('Manufacturing Product Weights')
            ax.set_xlabel('Weight (grams)')
            ax.set_ylabel('Frequency')
            st.pyplot(fig)

    with tab2:
        st.subheader("📝 Qualitative Data")

        # Sample categorical data
        categories = ['Excellent', 'Good', 'Fair', 'Poor']
        sample_size = st.slider("Number of responses:", 100, 1000, 500, key="qual")
        customer_satisfaction = np.random.choice(categories, sample_size, p=[0.3, 0.4, 0.2, 0.1])

        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            **Real-world examples:**
            - Customer feedback (Excellent, Good, Fair, Poor)
            - Demographics (Age groups, Education levels)
            - Product categories (Electronics, Clothing, Books)
            """)

        with col2:
            satisfaction_counts = pd.Series(customer_satisfaction).value_counts()
            fig, ax = plt.subplots(figsize=(8, 5))
            satisfaction_counts.plot(kind='bar', ax=ax, color='lightgreen')
            ax.set_title('Customer Satisfaction Survey')
            ax.set_xlabel('Rating')
            ax.set_ylabel('Count')
            plt.xticks(rotation=45)
            st.pyplot(fig)

    with tab3:
        st.subheader("⏰ Time Series Data")

        # Generate sample time series
        days = st.slider("Number of days:", 30, 365, 100, key="time")
        dates = pd.date_range('2023-01-01', periods=days, freq='D')
        sales_data = 1000 + np.cumsum(np.random.randn(days) * 10)

        col1, col2 = st.columns(2)
        with col1:
            st.markdown("""
            **Real-world examples:**
            - Retail: Daily sales figures
            - Energy: Consumption patterns over time
            - Agriculture: Weather and crop yield data
            """)

        with col2:
            fig, ax = plt.subplots(figsize=(8, 5))
            ax.plot(dates, sales_data)
            ax.set_title('Daily Sales Over Time')
            ax.set_xlabel('Date')
            ax.set_ylabel('Sales ($)')
            plt.xticks(rotation=45)
            st.pyplot(fig)

def show_central_tendency():
    st.markdown('<h1 class="main-header">📐 Measures of Central Tendency</h1>', unsafe_allow_html=True)

    # Interactive parameter controls
    st.sidebar.subheader("🎛️ Interactive Controls")
    distribution_type = st.sidebar.selectbox("Choose distribution type:",
                                           ["Normal", "Right Skewed", "Left Skewed", "Bimodal"])
    sample_size = st.sidebar.slider("Sample size:", 100, 2000, 500)

    # Generate data based on selection
    np.random.seed(42)
    if distribution_type == "Normal":
        data = np.random.normal(50, 15, sample_size)
    elif distribution_type == "Right Skewed":
        data = np.random.exponential(2, sample_size) * 10 + 20
    elif distribution_type == "Left Skewed":
        data = 100 - np.random.exponential(2, sample_size) * 10
    else:  # Bimodal
        data1 = np.random.normal(30, 8, sample_size//2)
        data2 = np.random.normal(70, 8, sample_size//2)
        data = np.concatenate([data1, data2])

    # Calculate measures
    mean_val = np.mean(data)
    median_val = np.median(data)
    mode_val = stats.mode(data, keepdims=True)[0][0] if len(data) > 0 else mean_val

    # Display measures with real-world context
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown(f"""
        **📊 Mean: {mean_val:.2f}**

        *Best for:* Salary negotiations, production targets

        *Business Impact:* Used in performance bonuses and budget planning
        """)

    with col2:
        st.markdown(f"""
        **🎯 Median: {median_val:.2f}**

        *Best for:* Real estate pricing, income analysis

        *Business Impact:* Government policy decisions, market analysis
        """)

    with col3:
        st.markdown(f"""
        **🔄 Mode: {mode_val:.2f}**

        *Best for:* Inventory planning, customer preferences

        *Business Impact:* Product sizing, service optimization
        """)

    # Visualization with measures highlighted
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.hist(data, bins=30, alpha=0.7, color='lightblue', edgecolor='black', density=True)
    ax.axvline(mean_val, color='red', linestyle='--', linewidth=2, label=f'Mean: {mean_val:.2f}')
    ax.axvline(median_val, color='green', linestyle='--', linewidth=2, label=f'Median: {median_val:.2f}')
    ax.axvline(mode_val, color='orange', linestyle='--', linewidth=2, label=f'Mode: {mode_val:.2f}')
    ax.set_title(f'{distribution_type} Distribution - Central Tendency Measures')
    ax.set_xlabel('Values')
    ax.set_ylabel('Density')
    ax.legend()
    st.pyplot(fig)

def show_dispersion():
    st.markdown('<h1 class="main-header">📏 Measures of Dispersion</h1>', unsafe_allow_html=True)

    datasets = load_sample_datasets()

    # Dataset and column selection
    dataset_choice = st.selectbox("Choose a dataset:", list(datasets.keys()))
    selected_data = datasets[dataset_choice]
    numeric_cols = selected_data.select_dtypes(include=[np.number]).columns.tolist()
    selected_columns = st.multiselect("Select columns to compare:", numeric_cols, default=numeric_cols[:2])

    if selected_columns:
        st.subheader("📊 Dispersion Comparison")

        dispersion_data = []
        for col in selected_columns:
            data = selected_data[col].dropna()
            dispersion_data.append({
                'Column': col,
                'Standard Deviation': np.std(data),
                'Variance': np.var(data),
                'Range': np.max(data) - np.min(data),
                'IQR': np.percentile(data, 75) - np.percentile(data, 25),
                'Coefficient of Variation (%)': (np.std(data) / np.mean(data)) * 100
            })

        dispersion_df = pd.DataFrame(dispersion_data)
        st.dataframe(dispersion_df.round(3))

        # Visualization
        fig, axes = plt.subplots(1, min(len(selected_columns), 3), figsize=(15, 5))
        if len(selected_columns) == 1:
            axes = [axes]

        for i, col in enumerate(selected_columns[:3]):
            data = selected_data[col].dropna()
            axes[i].boxplot(data)
            axes[i].set_title(f'{col}')
            axes[i].set_ylabel('Values')

        plt.tight_layout()
        st.pyplot(fig)

def show_univariate_analysis():
    st.markdown('<h1 class="main-header">📊 Univariate Analysis</h1>', unsafe_allow_html=True)

    datasets = load_sample_datasets()

    # User controls
    dataset_choice = st.selectbox("Choose a dataset:", list(datasets.keys()))
    selected_data = datasets[dataset_choice]

    # Column selection
    numeric_cols = selected_data.select_dtypes(include=[np.number]).columns.tolist()

    if numeric_cols:
        selected_column = st.selectbox("Select numerical column:", numeric_cols)
        data = selected_data[selected_column].dropna()

        # Interactive controls
        col1, col2 = st.columns(2)
        with col1:
            bins = st.slider("Number of bins:", 10, 50, 30)
        with col2:
            plot_type = st.selectbox("Plot type:", ["Histogram", "Density", "Box Plot"])

        # Create visualization
        fig, ax = plt.subplots(figsize=(10, 6))

        if plot_type == "Histogram":
            ax.hist(data, bins=bins, alpha=0.7, color='skyblue', edgecolor='black')
            ax.set_title(f'Histogram of {selected_column}')
            ax.set_xlabel(selected_column)
            ax.set_ylabel('Frequency')
        elif plot_type == "Density":
            sns.histplot(data, kde=True, ax=ax)
            ax.set_title(f'Density Plot of {selected_column}')
        else:  # Box Plot
            ax.boxplot(data)
            ax.set_title(f'Box Plot of {selected_column}')
            ax.set_ylabel(selected_column)

        st.pyplot(fig)

        # Distribution analysis
        st.subheader("📈 Distribution Analysis")
        skewness = stats.skew(data)
        kurtosis = stats.kurtosis(data)

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Skewness", f"{skewness:.3f}")
            if skewness > 0.5:
                st.write("Right-skewed distribution")
            elif skewness < -0.5:
                st.write("Left-skewed distribution")
            else:
                st.write("Approximately symmetric")

        with col2:
            st.metric("Kurtosis", f"{kurtosis:.3f}")
            if kurtosis > 0:
                st.write("Heavy-tailed distribution")
            else:
                st.write("Light-tailed distribution")

        with col3:
            # Normality test
            _, p_value = stats.normaltest(data)
            st.metric("Normality p-value", f"{p_value:.4f}")
            if p_value > 0.05:
                st.write("Likely normal distribution")
            else:
                st.write("Not normally distributed")

def show_bivariate_analysis():
    st.markdown('<h1 class="main-header">🔗 Bivariate Analysis</h1>', unsafe_allow_html=True)

    datasets = load_sample_datasets()

    # Dataset selection
    dataset_choice = st.selectbox("Choose a dataset:", list(datasets.keys()))
    selected_data = datasets[dataset_choice]

    # Variable selection
    numeric_cols = selected_data.select_dtypes(include=[np.number]).columns.tolist()

    if len(numeric_cols) >= 2:
        col1, col2 = st.columns(2)
        with col1:
            x_var = st.selectbox("Select X variable:", numeric_cols)
        with col2:
            y_var = st.selectbox("Select Y variable:", [col for col in numeric_cols if col != x_var])

        # Create scatter plot with regression line
        fig, ax = plt.subplots(figsize=(10, 6))

        x_data = selected_data[x_var].dropna()
        y_data = selected_data[y_var].dropna()

        # Ensure same length
        min_len = min(len(x_data), len(y_data))
        x_data = x_data.iloc[:min_len]
        y_data = y_data.iloc[:min_len]

        ax.scatter(x_data, y_data, alpha=0.6)

        # Add regression line
        z = np.polyfit(x_data, y_data, 1)
        p = np.poly1d(z)
        ax.plot(x_data, p(x_data), "r--", alpha=0.8)

        ax.set_xlabel(x_var)
        ax.set_ylabel(y_var)
        ax.set_title(f'Scatter Plot: {x_var} vs {y_var}')

        st.pyplot(fig)

        # Correlation analysis
        correlation = np.corrcoef(x_data, y_data)[0, 1]
        st.metric("Pearson Correlation", f"{correlation:.3f}")

        if abs(correlation) > 0.7:
            st.write("🔴 Strong correlation")
        elif abs(correlation) > 0.3:
            st.write("🟡 Moderate correlation")
        else:
            st.write("🟢 Weak correlation")

def show_quantiles():
    st.markdown('<h1 class="main-header">📈 Quantiles & Percentiles</h1>', unsafe_allow_html=True)

    # Generate sample data
    np.random.seed(42)
    sample_size = st.slider("Sample size:", 100, 1000, 500)
    distribution_type = st.selectbox("Distribution type:", ["Normal", "Exponential", "Uniform"])

    if distribution_type == "Normal":
        data = np.random.normal(50, 15, sample_size)
    elif distribution_type == "Exponential":
        data = np.random.exponential(2, sample_size) * 10 + 20
    else:  # Uniform
        data = np.random.uniform(10, 90, sample_size)

    # Calculate quantiles
    quartiles = [np.percentile(data, q) for q in [25, 50, 75]]
    deciles = [np.percentile(data, q) for q in range(10, 100, 10)]
    quintiles = [np.percentile(data, q) for q in [20, 40, 60, 80]]

    # Display quantile information
    col1, col2, col3 = st.columns(3)

    with col1:
        st.subheader("📊 Quartiles")
        st.write(f"Q1 (25th percentile): {quartiles[0]:.2f}")
        st.write(f"Q2 (50th percentile): {quartiles[1]:.2f}")
        st.write(f"Q3 (75th percentile): {quartiles[2]:.2f}")
        st.write(f"IQR: {quartiles[2] - quartiles[0]:.2f}")

    with col2:
        st.subheader("🔟 Deciles")
        for i, decile in enumerate(deciles[:5], 1):  # Show first 5
            st.write(f"D{i} ({i*10}th percentile): {decile:.2f}")

    with col3:
        st.subheader("🎯 Quintiles")
        for i, quintile in enumerate(quintiles, 1):
            st.write(f"Quintile {i} ({i*20}th percentile): {quintile:.2f}")

    # Visualization with quantile regions
    fig, ax = plt.subplots(figsize=(12, 6))

    # Histogram
    n, bins, patches = ax.hist(data, bins=30, alpha=0.7, color='lightblue', edgecolor='black')

    # Add quartile lines
    colors = ['red', 'orange', 'green']
    for i, q in enumerate(quartiles):
        ax.axvline(q, color=colors[i], linestyle='--', linewidth=2,
                  label=f'Q{i+1}: {q:.2f}')

    ax.set_title('Distribution with Quartile Lines')
    ax.set_xlabel('Values')
    ax.set_ylabel('Frequency')
    ax.legend()

    st.pyplot(fig)

    # Interactive percentile calculator
    st.subheader("🧮 Interactive Percentile Calculator")
    percentile_value = st.slider("Select percentile:", 1, 99, 50)
    calculated_percentile = np.percentile(data, percentile_value)

    st.write(f"The {percentile_value}th percentile is: **{calculated_percentile:.2f}**")
    st.write(f"This means {percentile_value}% of values are below {calculated_percentile:.2f}")

if __name__ == "__main__":
    main()















